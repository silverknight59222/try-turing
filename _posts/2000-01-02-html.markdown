---
title: HyperText Markup Language
layout: post
date: 2000-01-02
permalink: html
program: front-end
tags: front-end
lessontype: fe-new
---

Of all of the major technologies used on the web, on either the front- or the back- end, HTML is the oldest. In the beginning, the web was just a bunch of HTML documents that you wrote by hand. They had these cool things called hyperlinks that would allow a user to click on a word on one page and be taken to another page.

At the end of the day, HTML is made up two things: text, and tags that _mark up_ that text. (HTML stands for _hyper text markup language_!)

Let's say that we had some text and we wanted to denote that this text was a paragraph.

```
This text is a paragraph.
```

We'd wrap the text in paragraph tags.

```html
<p>This text is a paragraph.</p>
```

You'll notice that there are tags on both ends of the text.

We use `<p>` (the opening tag) to signal to the browser that everything that's about to follow is part of a paragraph and `</p>` (the closing tag) to let the browser know that this paragraph is done. When a user visits our application, the browser loads up the HTML and parses it into the elements that will eventually make up our user interface.

Here is an example of a slightly more robust document:

```html
<h1>Very Important Heading</h1>

<p>This is an introduction paragraph. Designers typically use "Lorem Ipsum" to fill out space in their designs while they wait for the real content. Lorem Ipsum looks kind of like Latin, but it's actually completely bogus. The nice part is that it has roughly the same distribution of word sizes as English.</p>

<h2>Lorem Ipsum Example</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
```

<div class="try-it">
<h2>Try It: Building a Basic Page</h2>

<p>Use what you know about headings and paragraph tags to create at least three headings of any size (h1 - h6) and three paragraph elements. The topic is your choice!</p>

<p>Need some filler text? Check out <a target="_blank" href="https://meettheipsums.com/">Meet the Ipsums</a>.</p>
</div>

<!-- <div class="try-it">
<h2>Try It: Building a Personal Webpage</h2>

<p> Open your Codepen account and create a new pen.</p>

<p>Use what you know about headings and paragraph tags to create a very simple website with your name, a brief bio, and your contact information. For the sake of our later exercises, make sure it has at least three headings and three paragraphs.</p>
<p>What you create right now is the start of a sandbox/playground where we will try out different styles and behaviors.</p>
</div> -->

<!-- ### Lists

To make a list in HTML, we use a combination of two elements.

Unordered List:

```html
<ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
</ul>
```

Ordered List:

```html
<ol>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
</ol>
```

<div class="try-it">
<h2>Try It: Lists</h2>

<p>Add a list of favorites to your page. Experiment with both unordered lists and ordered lists.</p>
</div> -->

### Images and Attributes

We use HTML tags to "mark up" text to show its semantic meaning. The browser uses these tags to build up the document. _Most_ tags have an opening and closing tag, but a few do not. For example, images (defined using the `<img>` tag) do not have a closing tag.

Consider the following:

```html
<img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/t-340/turing.png" alt="Turing School of Software and Design Logo">
```

There are two things happening here:

*First*, we have an `<img>` tag that is somewhat unique in that it doesn't have a closing tag like all of the others we've seen so far.

*Second*, our `<img>` tag has extra information inside it!

Our browser is more than happy to load up an image, but it'd be helpful if we told it where that image is located. That's where the `src` attribute comes in. It tells the browser what the source of our image is - we give it a link (an address!) to the image we want to render.

We also add the `alt` attribute contains text that identifies the image to a screen reader. The alt text is displayed if the picture can't be displayed for some reason. It helps all users, not just those using screen readers!

<div class="try-it">
<h2>Try It: Adding Images</h2>

<p>Let's update our page with three images. You can get images in three different ways:</p>
<ol>
    <li>Click on "assets" at the bottom of your Codepen, then select the "photos" tab.</li>
    <li>Go directly to <a target="_blank" href="https://unsplash.com/">Unsplash</a>, then right-click (or two-finger click) on an image you want and choose "Copy Image Address".</li>
    <li>Go to <a target="_blank" href="https://www.pexels.com/">Pexels</a> and do the same thing as above.</li>
</ol>
</div>


### Links

To add a link, we use the `<a>` tag. It has an opening and closing tag, _and_ it utilizes attributes!

The `<a>` tag, like the `<img>` tag, also has an attribute. Instead of `src`, we use `href` or hyper reference. The value of this attribute should be the web address, including `http://`, where you want the link to go.

For example:

```html
<a href="http://google.com">Google</a>
```

<div class="try-it">
<h2>Try It: Adding Links</h2>

<p>Add a few links to your HTML.</p>
<p>Want a challenge? Make an HTML <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul">list</a> and add your links as list items.</p>
</div>

### Inputs and Buttons

So far, we've done an excellent job of displaying information to the user, but we haven't really asked them for their input. HTML also includes a set of elements for building forms.

There are a lot to forms that we go into depth on in the full program, but we're going to blissfully ignore today.

Instead we'll focus on two elements:

- `<input>` creates an input field. `<input>` is like `<img>` in that it does not require or support a closing tag. It can take an optional `type` attribute that helps validate user input in some browsers.
- `<button>` creates a button. `<button>` on the other hand does have a closing tag.

Here's an example of an input tag with placeholder text and a button:

```html
<input type="text" placeholder="Enter your email">
<button>Click me!</button>
```

<div class="try-it">
<h2>Try It: Inputs and Buttons</h2>

<p>Add a few different types of inputs and a button to your page. Remember, these will not be functional right now.</p>
</div>

We'll be able to use JavaScript to target and interact with these elements soon!

### Block Elements: Structuring a Website

The way that we structure a website matters for the people who use it!

`<div></div>`

You can think of the `div` tag as a container element. You can put related content together into one HTML 'block'.

Block elements denote a big section — let’s call it a “block” — of our page. A `div` is like the flavorless Jello of HTML block tags: it don’t have any meaning in and of itself and doesn't come with any built-in styling from the browser.

### Conclusion

There are many more HTML tags. Some tags communicate information about the contents inside them, some are less "semantic". The ones we learned today are enough to get us started and the raw materials that we'll need to build a game by the end of the day. As the day goes on, we'll slip in some additional tags where it's appropriate, but their meanings and significance should be clear in the context in which they're presented.
