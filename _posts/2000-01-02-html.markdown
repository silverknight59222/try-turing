---
title: HyperText Markup Language
layout: post
date: 2000-01-02
permalink: html
program: front-end
tags: front-end
---

Of all of the major technologies used on the web—on either the front- or the back-end—HTML is the oldest. In the beginning, the web was just a bunch of HTML documents that you wrote by hand. They had these cool things called hyperlinks that would allow to click on a word on one page and be taken to another page.

At the end of the day, HTML is made up two things: text and tags that mark up that text.

Let's say that we had some text and we wanted to denote that this text was a paragraph.

```
This text is a paragraph.
```

We'd wrap the text in paragraph tags.

```html
<p>This text is a paragraph.</p>
```

We use `<p>` to signal to the browser that everything that's about to follow is part of a paragraph and `</p>` to let the browser know that this paragraph is done. When a user visits our application, the browser loads up the HTML and parses it into the elements that will eventally make up our user interface.

Here is an example of a slightly more robust document:

```html
<h1>Very Important Heading</h1>

<p>This is an introduction paragraph. Designers typically use "Lorem Ipsum" to fill out space in their designs while they wait for the real content. Lorem Ipsum looks kind of like Latin, but it's actually completely bogus. The nice part is that it has roughly the same distribution of word sizes as English.</p>

<h2>Lorem Ipsum Example</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
```

<div class="try-it">
<h2>Try It: Building a Personal Webpage</h2>

<p>Use what you know about headings and paragraph tags to create a very simple website with your name, a brief bio, and your contact information. For the sake of our later exercises, make sure it has at least three headings and three paragraphs.</p>
<p>What you create right now is the start of a sandbox/playground where we will try out different styles and behaviors.</p>
</div>

### Images and Attributes

We use HTML tags to "mark up" text to show its semantic meaning. The browser uses these tags to build up document. _Most_ tags have an opening and closing tag, but a few do not. Images—defined using the `<img>` tag do not have a closing tag for instance.

Consider the following:

```html
<img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/t-340/turing.png">
```

There are two things happening here. First, we have an `<img>` tag that is somewhat unique in that it doesn't have a closing tag like all of the others we've see so far.

Our `<img>` tag needs an extra little piece of information. Our browser is more than happy to load up an image, but it'd be helpful if we told it where that image located. That's where the `src` attribute comes in.

![Anatomy of an HTML Tag](/images/anatomy.png)

<div class="try-it">
<h2>Try It: Adding Images</h2>

<p>Let's update our page from earlier with one or more images.</p>
</div>

### Links

Another important tag is the `<a>` tag. These are the tags we use for creating hyperlinks. Consider the following example:

```html
<p>
  Welcome to the <a href="http://turing.io">Turing School of Software and Design</a>.
</p>
```

In this case, `<a>` tags need to know where they should link to. We use the `href` attribute to set where the link should point to. `href` is an abbreviation for "hyper reference."

<div class="try-it">
<h2>Try It: Adding Links</h2>

<p>On your personal page, add a link to one of your favorite websites.</p>
</div>

### Block and Inline Elements

You might have noticed that the `<a>` tag is a behaves a little bit different that the `<h1>`, `<h2>`, and `<p>` tags. We can use the `<a>` tag to mark up a few words, while the other tags denote a big section—let's call it a "block"—of our page.

This is an important distinction:

- Block elements stack on top of each other. Each one starts and ends on its own line.
- Inline elements can be used to mark up a few words inside of a block element.

### `<span>` and `<div>`

I like to think of `<span>` and `<div>` as the flavorless Jello of HTML tags, they don't have any meaning in and of themselves and they typically don't come with any built-in styling from the browser.

There is just one important difference between the two.

- `<div>` is a block element.
- `<span>` is an inline element.

We'll discuss these more in a bit when we talk about CSS. But, for now, let's move on to forms.

### Inputs and Buttons

So far, we've done an excellent job of displaying information to the user, but we haven't really asked them for their input. HTML also includes a set of elements for building forms.

There are a lot to forms that we go into depth on in the full program, but we're going to blissfully ignore today.

Instead we'll focus on two elements:

- `<input>` creates an input field. `<input>` is like `<img>` in that it does not require or support a closing tag. It can take an optional `type` attribute that helps validate user input in some browsers.
- `<button>` creates a button. `<button>` on the other hand does support a closing tag.

We'll use these elements when we discuss JavaScript.

<div class="try-it">
<h2>Try It: Adding Email List Sign Up</h2>

<p>Although we can't make this functional, add an input and a button that mimics signing up for a newsletter.</p>
</div>

### Conclusion

There are many more HTML tags. But, the ones we learned today are enought to get us started and the raw materials that we'll need to build a game by the end of the day. As the day goes on, I'll slip in some additional tags where it's appropriate, but they meaning and significance should be clear in the context that they're presented.