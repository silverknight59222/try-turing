---
title: Strings
layout: post
date: 1000-01-01
permalink: strings
program: back-end
tags: back-end
---

In Ruby, a String is a series of characters between quotation marks:

```ruby
"here is a string"
"1234567"
"**** this is another string ****"
```

## Our First Program

Let's write a program where we we print strings. First, we'll need to make a file and save it as `strings.rb`.

```ruby
print "here is a string"
print "1234567"
print "**** this is another string ****"
```

To run this program, type `ruby strings.rb` from the command line.

Using print does not add a line between each string. If we want to do that, we can use puts:

```ruby
puts "here is a string"
puts "1234567"
puts "**** this is another string ****"
```

<div class="try-it">
<h2>Try it: Printing Strings</h2>

<p>Write a program that prints out your name, location, and email address each separated by a line of dashes.</p>

<pre>Nate Allen
---------------
Denver, CO
---------------
nate@turing.io</pre>
</div>

## Assigning Strings to Variables

We can save strings to variables:

```ruby
email = "rachel@turing.io"
address = "123 Nowhere Street, Denver, CO 80202"
first_name = "Rachel"
```

Notice that these variables start with a lower case letter and can include underscores (_).

We can print these variables:

```ruby
email = "rachel@turing.io"
address = "123 Nowhere Street, Denver, CO 80202"
first_name = "Rachel"

puts first_name
puts address
puts email
```

Even better, we can use string interpolation to combine:

```ruby
email = "rachel@turing.io"
address = "123 Nowhere Street, Denver, CO 80202"
first_name = "Rachel"

puts "#{first_name} lives at #{address}. Her email address is #{email}."
```

<div class="try-it">
<h2>Try it: Interpolating Strings</h2>

<p>Write a program that assigns variables pet_name, food, and toy. Interpolate those variables into a string to output something like this:</p>

<pre>fluffy plays with stuffed mice after eating tuna fish.</pre>
Run your program a few times with different values for each variable to make sure it works.
</div>

## String Methods

You can think of a method as a command. With a dog, one command you might give is "bark". In code, we might represent this as:

```ruby
dog.bark
```

This is called "dot notation" and the terminology is "call the bark method on dog".

Strings also have methods. Here are some common ones:

```ruby
message = "Hello, World!"

puts message.capitalize
puts message.upcase
puts message.downcase
puts message.include?("World")
puts message.include?("Mars")
puts message.reverse
puts message.length
```

<div class="try-it">
<h2>Try it: Using String Methods</h2>

<p>Modify your program to capitalize the pet_name, reverse the food, and upcase the toy.</p>

<pre>Fluffy plays with STUFFED MICE after eating hsif anut.</pre>
Run your program a few times with different values for each variable to make sure it works.
</div>
