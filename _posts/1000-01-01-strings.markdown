---
title: Strings
layout: post
date: 1000-01-01
permalink: strings
---

In Ruby, a String is a series of characters between quotation marks:

```ruby
"here is a string"
"1234567"
"**** this is another string ****"
```

<h4>Our First Program</h4>

Let's write a program where we we print strings. First, we'll need to make a file and save it as <span class="command">strings.rb</span>.

```ruby
print "here is a string"
print "1234567"
print "**** this is another string ****"
```

To run this program, type <span class="command">ruby strings.rb</span> from the command line.
<br><br>
Using print does not add a line between each string. If we want to do that, we can use puts:

```ruby
puts "here is a string"
puts "1234567"
puts "**** this is another string ****"
```

<div class="card cyan ">
  <div class="card-content white-text">
    <span class="card-title black-text"><b>Try it: Printing Strings</b></span>
    <p>
      Write a program that prints out your name, location, and email address each separated by a line of dashes.
      <br>
      <div class="output">
        Rachel Warbelow <br>
        --------------- <br>
        Denver, CO <br>
        --------------- <br>
        rachel@turing.io <br>
    </div>
  </div>
</div>

<h4>Assigning Strings to Variables</h4>

We can save strings to variables:

```ruby
email = "rachel@turing.io"
address = "123 Apple Street, Denver, CO 80202"
first_name = "Rachel"
```

Notice that these variables start with a lower case letter and can include underscores (_).

We can print these variables:

```ruby
email = "rachel@turing.io"
address = "123 Apple Street, Denver, CO 80202"
first_name = "Rachel"

puts first_name
puts address
puts message
```

Even better, we can use string interpolation to combine:

```ruby
email = "rachel@turing.io"
address = "123 Apple Street, Denver, CO 80202"
first_name = "Rachel"

puts "#{first_name} lives at #{address}. Her email address is #{email}."
```

<div class="card cyan ">
  <div class="card-content white-text">
    <span class="card-title black-text"><b>Try it: Interpolating Strings</b></span>
    <p>
      Write a program that assigns variables pet_name, food, and toy. Interpolate those variables into a string to output something like this:
      <br>
      <div class="output">
        fluffy plays with stuffed mice after eating tuna fish.
      </div>
      Run your program a few times with different values for each variable to make sure it works.
    </p>
  </div>
</div>

<h4>String Methods</h4>

You can think of a method as a command. With a dog, one command you might give is "bark". In code, we might represent this as:

```ruby
dog.bark
```

This is called "dot notation" and the terminology is "call the bark method on dog".

Strings also have methods. Here are some common ones:

```ruby
message = "Hello, World!"

puts message.capitalize
puts message.upcase
puts message.downcase
puts message.include?("World")
puts message.include?("Mars")
puts message.reverse
```

<div class="card cyan ">
  <div class="card-content white-text">
    <span class="card-title black-text"><b>Try it: Using String Methods</b></span>
    <p>
      Modify your program to capitalize the pet_name, reverse the food, and upcase the toy.
      <br>
      <div class="output">
        Fluffy plays with STUFFED MICE after eating hsif anut.
      </div>
      Run your program a few times with different values for each variable to make sure it works.
    </p>
  </div>
</div>
