---
title: CSS Ghost
layout: post
date: 2000-01-03
permalink: css-part-2
program: front-end
tags: front-end
lessontype: fe-new
---

### Building a Basic Ghost

We're ready to start creating our ghost using HTML and CSS! Eventually, he/she/they will look like this:

<img src="/images/ghost-shadow.gif" alt="finished ghost" width="200">

But we've gotta start simple. First, let's create a container div that we can use to contain all of our ghost parts (body, eyeballs, flaps, etc.). We'll give this container a width of 100px. 

```html
<div class="ghost-container">
  
</div>
```

```css
.ghost-container {
  width: 100px;
}
```

Now that we have a container, we can add another div inside for the basic ghost body. We will style the height and background color of this inner ghost-body element to look like the picture below:

<img src="/images/ghost-step-one.png" alt="shapeless ghost" width="200">

#### Basic Ghost Shape

Let's use a border-radius to create the head of the ghost. 

<img src="/images/ghost-step-two.png" alt="basic ghost" width="200">

#### Ghost with Basic Flaps

Next, we'll add three more divs to create flaps. Give these flaps the class of "flap". We'll use CSS to experiment with display: inline-block in order to get these divs to line up next to each other. We'll also use a percentage width and negative margins to make sure that the flaps are the same size as the body. NOTE: This part may take some tinkering, [like this]().

<img src="/images/ghost-step-three.png" alt="basic flaps ghost" width="200">

#### Ghost with Curved Flaps

Finally, we'll use the border radius to curve the flaps on the bottom. 

<img src="/images/ghost-step-four.png" alt="curved flaps ghost" width="200">

<!-- ### Transformations

Try this rule on for size:

```css
p {
  transform: rotate(180deg);
}
```

We have [quite a few transformations at our disposal](https://developer.mozilla.org/en-US/docs/Web/CSS/transform), but we'll cover just a subset today:

- Rotation: `transform: rotate(180deg);` will flip the element upside down.
- Scaling: `transform: scale(3);` will make the element bigger as defined by a vector.
- Translating (moving): `transform: translate(25px, 10px);` will move the element 25 pixels to the right and 10 pixels down.

<div class="try-it">
<h2>Try It: Transformations</h2>

<p>Add a transform rule to an element on your page. You can choose to rotate, scale, or transform it.</p>
</div> -->

### Transformations

Add this line to your .ghost-container:

```css
.ghost-container {
  transform: translate(200px, 50px);
}
```

We have [quite a few transformations at our disposal](https://developer.mozilla.org/en-US/docs/Web/CSS/transform). For example: 

- Rotation: `transform: rotate(180deg);` will flip the element upside down.
- Scaling: `transform: scale(3);` will make the element bigger as defined by a vector.
- Translating (moving): `transform: translate(25px, 10px);` will move the element 25 pixels to the right and 10 pixels down.

You can also add more than one transformation. For example:

```css
.ghost-container {
  transform: scale(0.3) rotate(-40deg);
}
```

<div class="try-it">
<h2>Try It: Ghost Transformations</h2>

<p>Add one or more transformation values to your ghost-container and change the values to see how it changes your ghost.</p>
</div>


#### Animation with Keyframes

Keyframes allow us to define a specific set of styles over the course of a time period. For example, if you said you wanted an animation to last 10 seconds, you could then define what you want the element to do at specific percents through the time period. 

There are two parts to this process: First, you must define the keyframes. [Mozilla Keyframes Docs](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)

Then, you need to define the animation property for a specific element. [Mozilla Animation Docs](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)

This is what they look like when used in conjunction: 

```css
.ghost-body {
  animation: camoflage 5s linear infinite;
}

@keyframes camoflage {
  50% {
    background-color: orange;
  }
}
```


### Using Keyframes to Add Horizontal Movement

Can you use what you know about keyframes and the animation property to make your ghost move across the page? 

Hint: You'll need to use the `transform: translate()` property. Be sure to add two values for pixels inside of the parentheses. 

<img src="/images/ghost-simple-move.gif" alt="simple move ghost" width="200">

### Multi-directional Moving Ghost

Now, let's get more complicated. Right now, we have one keyframe at 50%. Can you make several keyframe points so that the ghost looks like it is floating across the screen while also moving slightly up and down? 

<img src="/images/ghost-complex-move.gif" alt="multi-directional moving ghost" width="200">

### Ghost with Wiggling Flaps

Define another keyframe called `wiggle` and make it so that the `border-radius` on the ghost flaps change in some way at 25% and 75%. Be sure to add `animation: wiggle 3s linear infinite` to your `.flap` styles. 

<img src="/images/ghost-wiggle-flaps.gif" alt="wiggle flaps ghost" width="200">

### Ghost with Eyes

Add two `div`s within the ghost-body div and give them a class of `.eyeball`. Then style the eyeballs to have a height, width, border-radius, margin, and display inline-block. Then add `text-align: center` to your `.ghost-body` styles in order to center the eyeballs. Note: Centering is beyond what we're doing in today's class, so text-align is a way we'll cheat to get the eyeballs to appear in the middle of the ghost body. 

<img src="/images/ghost-eyes.gif" alt="ghost with eyes" width="200">

### Blinking Ghost

Create another keyframe, `blink`, that changes the height of the eyeballs. 

<img src="/images/ghost-blinking.gif" alt="ghost with eyes" width="200">

### Ghost Shadow

Add a div below the ghost-body div and give it height, width, background-color, and a border-radius. It should automatically float if it's inside of the ghost-container div. 

<img src="/images/ghost-shadow.gif" alt="ghost with shadow" width="200">


### Finished Product

Take a look at our example below if you're stuck! 

<p data-height="378" data-theme-id="0" data-slug-hash="yRRXjx" data-default-tab="css,result" data-user="rwarbelow" data-pen-title="Rachel's Ghost Playground - Finished" class="codepen">See the Pen <a href="https://codepen.io/rwarbelow/pen/yRRXjx/">Rachel's Ghost Playground - Finished</a> by Rachel Warbelow (<a href="https://codepen.io/rwarbelow">@rwarbelow</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
