---
title: Introduction to jQuery
layout: post
date: 2000-01-04
permalink: jquery
program: front-end
---

We're going to hold off on talking about plain, vanilla JavaScript for just a second and jump straight to jQuery. 

jQuery is a JavaScript library that allows us to use CSS selectors to find elements on the page and then interact with them. If HTML is the structure and CSS is the style, you can think of JavaScript and jQuery as the stuff that makes the user experience come alive.

Under the hood, jQuery is built in plain, vanilla JavaScript. It gives our JavaScript super powers. It's used on about 78% of the top million web pages. So, it's worth while getting comfortable with it.

Important: In order to have access to the jQuery library, you need to add this line to your HTML. Generally, you'll see this line at the bottom of the HTML page.

```html
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
```

Do not forget this line! If you do, none of your jQuery will work. Remember this later when you start a new project. 

## Responding to User Events

JavaScript along with its good friend jQuery are used to change and manipulate web pages. The real power of using jQuery to change pages emerges when we start listening for user events.

This is the crux of front-end engineering. We present a user interface and then as the user interacts with the UI, we change and update what he or she sees.

Let's take a look at the example below: 

<p data-height="300" data-theme-id="23788" data-slug-hash="QEQwjy" data-default-tab="js,result" data-user="turing" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/team/turing/pen/QEQwjy">QEQqjy</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

The following things are happening in the example above:

- We're querying for any element with the class of `change-me`.
- We're adding an "event listener" to those elements. (There is just one in this case.)
- We're listening for a user's mouse click.
- We're providing a function. You can think of a function as a package of code to be executed.
- In this example, the function will change the content of our heading.

Now, whenever a user clicks on that button. The browser will run the function we provided to the event listener.

Next, take a few minutes with a partner to figure out what is happening in this example. In order to fully understand this one, you'll need to look at the HTML, the CSS, and the JavaScript.

<p data-height="300" data-theme-id="23788" data-slug-hash="gMPdzx" data-default-tab="js,result" data-user="turing" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/team/turing/pen/gMPdzx/">Event Listeners</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

<div class="try-it">
<h2>Try It: Toggling a CSS Class using jQuery</h2>

Go back to your personal page. Use jQuery to toggle the class of your all of your headings when any specific heading is clicked. The new class should change at least one property of the element (for example: color, font-family, etc.)
</div>

We can also listen for things other than clicks. For example:

- dblclick
- mouseenter
- mouseleave

Take a moment to try these out.

## Getting Values from the User

We're getting somewhere good. We can respond to actions. It would be cool if we could also get some information from the user. If you recall, HTML provides `<input>` fields for just this kind of situation. jQuery helps out by providing the `.val()` method for getting the value out of a selected `<input>` element.

Let's explore the following example.

<p data-height="300" data-theme-id="23788" data-slug-hash="YWwOmQ" data-default-tab="js,result" data-user="turing" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/team/turing/pen/YWwOmQ/">Event Listeners</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

In this example, we're doing the following:

- We're adding an event listener to the "Change Me" button.
- When it's clicked, we're grabbed the value of the input field and storing it into a variable.
- We're then updating the contents of the `<h1>` to the value we stored from the input field.

Note that you need to use the `var` keyword when declaring a variable. If you forget the `var` keyword, your variable will be declared in the global scopeâ€”whether you meant it that way or not. (For our purposes today, forgetting the `var` keyword will not be the end of the world, but just know that it could cause subtle bugs in our code. Let's get in the habit of using it now.)

<div class="try-it">
<h2>Try It: User Input</h2>

<p>Go back to your bio page that you created earlier. Add a heading at the top that says, "Welcome, guest!" and an input box for the guest to enter their name. When they click a submit button, change the text of "guest" to their name. </p>
<p>HINT: You may want to wrap the word "guest" in a span tag so that you can target it using jQuery.</p>
</div>
