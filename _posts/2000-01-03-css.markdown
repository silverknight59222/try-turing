---
title: Cascading Style Sheets
layout: post
date: 2000-01-03
permalink: css
---

CSS is a way to add style to HTML documents on the web. It's incredibly powerful. Let's take a look at some examples of CSS in action.

- [CSS Zen Garden](http://www.csszengarden.com)
- [Design Patterns on CodePen](http://codepen.io/patterns/)

### Styling Elements

In CSS, we right a bunch of rules for how our docment should look. The browser evaluates those trules and styles the page accordingly. A CSS rule is defined as follows:

![Anatomy of a CSS Selector](/images/css-rule.png)

In the example above, the browser will set any `<strong>` element's color to red. We can define multiple sets of properties and values in a given rule.

<div class="try-it">
<h2>Try It: Adding Color</h2>

<p>On your personal page, can you set the color of all of the h1 tags to red and the h2 tags to blue?</p>

<p>As an extension, here are some other things you can try on for size:</p>

<li>You can change the background of an element using the background property. You can pass it a color as well.</li>
<li>There are a lot of colors out there. Find a color that makes you happy <a href="http://colours.neilorangepeel.com">here</a></li>
</div>

Once you've selected and styled a few elements, explore a few additional properties:

- [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)
- [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)
- [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow)
- [`opacity`](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity)
- [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width)
- [`height`](https://developer.mozilla.org/en-US/docs/Web/CSS/height)
- [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)
- [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)
- [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)
- [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)

### Psuedo-selectors

Stying elements is pretty neat, but our elements can be in different states depending on what the user is doing on page. Not only can we style an element with CSS, we can always define specific rules for when a user is hovering or actively clicking on an element.

The following rule will only be in effective when a user is actively hovering over a `<p>` element.

```css
a:hover {
  background-color: paleturquoise;
}

a:active {
  background-color: orange;
}
```

<p data-height="300" data-theme-id="23788" data-slug-hash="RRWXVp" data-default-tab="css,result" data-user="turing" data-embed-version="2" data-editable="true" class="codepen">See the Pen <a href="http://codepen.io/team/turing/pen/RRWXVp/">Ipsums: Hovering</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

<div class="try-it">
<h2>Try It: Pseudo Selectors</h2>

<p>Style some of the elements on your personal page using the :hover and :active pseudo-selectors.</p>
</div>

#### Classes

Right now, we know how to style _all_ of the paragraphs or _all_ of the links on a page. But what if we just wanted to style just one?

As it turns out, we can set a `class` attribute on an HTML element. The `class` attribute takes one or more words—separated by spaces. Typically we use classes to describe what kind of element we're creating. For example, we might create a `<section>` element with the `class` of `"sidebar"` to denote that this is a particular kind of section on the page. We might also use classes to describe the kind of content inside of the element.

I already added a few of these to the page we've been working with. Here is an abbreviated example:

```html
<section class="ipsums">
  <article class="lorem-ipsum">
    <h2>Lorem Ipsum</h2>
    …
  </article>
  …
</section>
```

This is all great and wonderful, but how do we style these specific elements? Easy! We just prefix our selector with a `.`.

```css
.ipsums {
  background-color: yellow;
}
```

This will look for every element—regardless of type—that has the class of `ipsums` and style it with a yellow background color.

<div class="try-it">
<h2>Try It: Adding Classes</h2>

<p>Can you style some of the classes used in the example above? Even better can you add some of your own classes and style them? In a perfect world, names of classes should be meaningful.</p>
</div>

### Transitions and Transformations

We can also add a bit of motion to our documents with CSS using the `transform` and `transition` properties.

Try this rule on for size:

```css
p {
  transform: rotate(180deg);
}
```

Groovy, right? We have [quite a few transformations at our disposal](https://developer.mozilla.org/en-US/docs/Web/CSS/transform), but we'll cover just a subset today:

- Rotation: `transform: rotate(180deg);` will flip the element upside down.
- Scaling: `transform: scale(3);` will make the element bigger as defined by a vector.
- Translating (moving): `transform: translate(25px, 10px);` will move the element 25 pixels to the right and 10 pixels down.

Try this:

```html
<div></div>
```

```css
div {
  height: 50px;
  width: 50px;
  background-color: red;
  transform: scale(10);
}
```

Transformations become extra fun when we pair them with transitions. For our purposes, transitions will take two pieces of information:

- The name of the property we want to transition. (Alternatively, we can use `all` to transition all of the properties.)
- The duration of the transition.

Consider the following example:

<p data-height="300" data-theme-id="23788" data-slug-hash="ezpqbY" data-default-tab="css,result" data-user="turing" data-embed-version="2" data-editable="true" class="codepen">See the Pen <a href="http://codepen.io/team/turing/pen/ezpqbY/">Ipsums: Transitions</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

<div class="try-it">
<h2>Try It: Transformation Properties</h2>

<p>Use the div example from above to create a transition that transitions the color, size, and position of the div upon a mouse hover over a 4 second duration.</p>
</div>

### Transition Algorithms

CSS can transition a given element from _A_ to _B_ but it doesn't do it in a linear fashion by default. There are a number of timing functions available to us. The default is `ease`, but there are a number of other ones available. We can even make our own custom ones, but that's beyond the scope of today—unless you really want to explore it. These transitions are based on a <a href="http://cubic-bezier.com/">cubic Bezier curve</a>. 

<p data-height="300" data-theme-id="23788" data-slug-hash="pbjWGR" data-default-tab="css,result" data-user="turing" data-embed-version="2" class="codepen">See the Pen <a href="https://codepen.io/team/turing/pen/pbjWGR/">CSS Transitions</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

Here is an incomplete list of the types of timing functions available to you.

- `ease`
- `linear`
- `ease-in`
- `ease-out`
- `ease-in-out`
- `steps()`

<div class="try-it">
<h2>Try It: Transformation Algorithms</h2>

<p>Add one more div, then give each div a different class name. Can you make it so that one div transitions in steps while the other transitionsl linearly?</p>
</div>
