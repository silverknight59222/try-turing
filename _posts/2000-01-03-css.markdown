---
title: Cascading Style Sheets
layout: post
date: 2000-01-03
permalink: css
program: front-end
tags: front-end
---

CSS is a way to add style to HTML documents on the web. It's incredibly powerful. Let's take a look at some examples of CSS in action.

- [CSS Zen Garden](http://www.csszengarden.com)

### Styling Elements

In CSS, we right a bunch of rules for how our document should look. The browser evaluates those rules and styles the page accordingly. A CSS rule is defined as follows:

![Anatomy of a CSS Selector](/images/css-rule.png)

In the example above, the browser will set any `<strong>` element's color to red. We can define multiple sets of properties and values in a given rule.

<div class="try-it">
<h2>Try It: Adding Color</h2>

<p>On your personal page, can you set the color of all of the h1 tags to red and the p tags to blue?</p>

<p>Next, look into any of the following attributes and choose three to play around with:</p>

<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border">border</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-color">background-color</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow">box-shadow</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/opacity">opacity</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/width">width</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/height">height</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin">margin</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding">padding</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family">font-family</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size">font-size</a></li>

There are a lot of colors out there. Find a color that makes you happy <a href="http://colours.neilorangepeel.com">here</a>
</div>

### Psuedo-selectors

Styling elements is pretty neat, but our elements can be in different states depending on what the user is doing on page. Not only can we style an element with CSS, we can always define specific rules for when a user is hovering or actively clicking on an element.

The following rule will only be in effect when a user is actively hovering over an `<a>` element.

```css
a:hover {
  background-color: paleturquoise;
}
```

<div class="try-it">
<h2>Try It: Pseudo Selectors</h2>

<p>Style some of the elements on your personal page using the :hover pseudo-selectors. For example, you might try changing the background-color of your paragraph elements when a user hovers.</p>
</div>

#### Classes

Right now, we know how to style _all_ of the paragraphs or _all_ of the links on a page. But what if we just wanted to style just one?

As it turns out, we can set a `class` attribute on an HTML element. The `class` attribute takes one or more words—separated by spaces. Typically we use classes to describe what kind of element we're creating. For example, we might create a `<p>` element with the `class` of `"sidebar"` to denote that this is a particular kind of section on the page. We might also use classes to describe the kind of content inside of the element.

```html
<h2 class="heading-main">Lorem Ipsum</h2>
```

This is all great and wonderful, but how do we style these specific elements? Easy! We just prefix our selector with a `.`.

```css
.heading-main {
  background-color: yellow;
}
```

This will look for every element—regardless of type—that has the class of `heading-main` and style it with a yellow background color.

<div class="try-it">
<h2>Try It: Adding Classes</h2>

<p>Add a class to just two of your paragraphs, then use CSS to add styles for that class. Both of the paragraphs should change!</p>
</div>

### Transitions and Transformations

We can also add a bit of motion to our documents with CSS using the `transform` and `transition` properties.

Try this rule on for size:

```css
p {
  transform: rotate(180deg);
}
```

Groovy, right? We have [quite a few transformations at our disposal](https://developer.mozilla.org/en-US/docs/Web/CSS/transform), but we'll cover just a subset today:

- Rotation: `transform: rotate(180deg);` will flip the element upside down.
- Scaling: `transform: scale(3);` will make the element bigger as defined by a vector.
- Translating (moving): `transform: translate(25px, 10px);` will move the element 25 pixels to the right and 10 pixels down.

Transformations become extra fun when we pair them with transitions. For our purposes, transitions will take two pieces of information:

- The name of the property we want to transition. (Alternatively, we can use `all` to transition all of the properties.)
- The duration of the transition.

Consider the following example:

<p data-height="300" data-theme-id="23788" data-slug-hash="ezpqbY" data-default-tab="css,result" data-user="turing" data-embed-version="2" data-editable="true" class="codepen">See the Pen <a href="http://codepen.io/team/turing/pen/ezpqbY/">Ipsums: Transitions</a> by Turing School of Software and Design (<a href="http://codepen.io/turing">@turing</a>) on <a href="http://codepen.io">CodePen</a>.</p>

Before moving on to the Try It section, add the following to your HTML and CSS:

Try this:

```html
<div></div>
```

```css
div {
  height: 50px;
  width: 50px;
  background-color: red;
  transform: rotate(130deg);
}
```

<div class="try-it">
<h2>Try It: Transformation Properties</h2>

<p>Use the div from above to create a transition that transitions the color and size of the div upon a mouse hover over a 4 second duration.</p>
</div>  
